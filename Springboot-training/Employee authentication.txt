SpringSecurity1Application 




package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.example.demo.Entity.Employee;
import com.example.demo.Repository.Repository;

@SpringBootApplication
public class SpringSecurity1Application implements CommandLineRunner{

	public static void main(String[] args) {
		SpringApplication.run(SpringSecurity1Application.class, args);
	}

	@Autowired
	public Repository repo;
	
	@Override
	public void run(String... args) throws Exception {
		
		Employee emp1 = new Employee("Harshini", 68000);
		repo.save(emp1);
		
		Employee emp2 = new Employee("Harshu", 30000);
		repo.save(emp2);
		
	}

}




SECURITY CONFIG




package com.example.demo.Config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    // User Creation
    @Bean
    public UserDetailsService userDetailsService(PasswordEncoder encoder) {

        // InMemoryUserDetailsManager
        UserDetails admin = User.withUsername("Harshini")
                .password(encoder.encode("harshini"))
                .roles("ADMIN")
                .build();

        UserDetails user = User.withUsername("Harshu")
                .password(encoder.encode("harshu"))
                .roles("USER")
                .build();

        return new InMemoryUserDetailsManager(admin, user);
    }

	@Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

		return http
				.authorizeHttpRequests((authorize) -> authorize
						.requestMatchers("employees/all").authenticated()
						.requestMatchers("employees/{id}").permitAll()
						.anyRequest().authenticated()
				)
				
				.formLogin(Customizer.withDefaults())
				.build();
    }

    // Password Encoding
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}




EmployeeController






package com.example.demo.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Entity.Employee;
import com.example.demo.Repository.Repository;

@RestController
@RequestMapping("/employees")
@ComponentScan(basePackages = "com.example.demo")
public class EmployeeController {

	@Autowired
	public Repository repo;
	
	@GetMapping
	public String welcome() {
		return "WELCOME WELCOME";
	}
	
	@GetMapping("/all")
	@PreAuthorize("hasAuthority('ROLE_USER','ROLE_ADMIN')")
	public List<Employee> getAllEmployees(){
        List<Employee> employees = repo.findAll();
		return employees;
	}
	
	@GetMapping("{id}")
	@PreAuthorize("hasAuthority('ROLE_USER')")
	public Optional<Employee> getEmployeeById(@PathVariable int id) {
		Optional<Employee> employee= repo.findById(id);
		return employee;
	}
	
    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return repo.save(employee);
    }
}







Employee.java







package com.example.demo.Entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name = "employees")
public class Employee {

	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	
	@Column
	private String name;
	
	@Column
	private float salary;
	
	public Employee(String name, float salary) {
		super();
		this.name = name;
		this.salary = salary;
	}

	public Employee() {
		super();
	}

	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}

	public float getSalary() {
		return salary;
	}
	public void setSalary(float salary) {
		this.salary = salary;
	}
	
	
	
	
}





Repository.java







package com.example.demo.Repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.Entity.Employee;

public interface Repository extends JpaRepository<Employee , Integer>{

}







application.properties







spring.datasource.url=jdbc:mysql://localhost:3306/springboot
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=H@rshini1111

spring.jpa.hibernate.ddl-auto=update

#spring.security.user.name=Harshini
#spring.security.user.password=Harshini

spring.main.allow-bean-definition-overriding=true





springSecurity-1/pom.xml









<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
		<artifactId>SpringSecurity-1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringSecurity-1</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
