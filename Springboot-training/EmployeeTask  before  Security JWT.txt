EmployeeTaskApplicatio.java





package com.example.demo;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.example.demo.model.Employee;
import com.example.demo.repository.EmployeeRepository;

@SpringBootApplication
public class EmployeeTaskApplication implements CommandLineRunner{

	private static final Logger logger = LoggerFactory.getLogger(EmployeeTaskApplication.class);
	
	public static void main(String[] args) {
		SpringApplication.run(EmployeeTaskApplication.class, args);
	}

	@Autowired
	public EmployeeRepository repo;
	
	
	@Override
	public void run(String... args) throws Exception {
		
		Employee emp1 = new Employee("Gopal" , 100000);
		repo.save(emp1);
		
		Employee emp2 = new Employee("Harshini" , 68000);
		repo.save(emp2);
		
		Employee emp3 = new Employee("Gayathri" , 70000);
		repo.save(emp3);
		
	}

}








EmployeeController.java








package com.example.demo.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.EmployeeException;
import com.example.demo.repository.EmployeeRepository;

import org.springframework.cache.annotation.Cacheable;

import jakarta.validation.Valid;

import com.example.demo.model.Employee;

@RestController
@RequestMapping("/employees")
@ComponentScan(basePackages = "com.example.demo")

public class EmployeeController {

    /*  recording information, actions, and events within the app.    
    
    -----Levels in logger -----
    
    info   
    error
    warn       
    trace 
    debug  */
    
    private static final Logger logger = LoggerFactory.getLogger(EmployeeController.class);

    @Autowired
    
    public EmployeeRepository employeeRepository;
                                                
    @GetMapping
    @Cacheable(value = "employees") 
    public List<Employee> getAllEmployees(){
        List<Employee> employees = employeeRepository.findAll();
        if (employees != null) {
            logger.info("Fetched employees");
        }
        else {
            logger.error("List is empty");
        }
        return employees;
    }
    
    @PostMapping
    @Cacheable(value = "employees")
    public Employee createEmployee(@RequestBody Employee employee) {
        if(employee.getName()==null || employee.getName().length()==0) {
            logger.error("Name cannot be null");
            throw new EmployeeException("Name cannot be null");
        }
        else {
            logger.info("New Employee created....");
        }
        return employeeRepository.save(employee);
    }

    @GetMapping("{id}")
    @Cacheable(value = "employees", key = "#id")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable int id){
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> {
                    logger.error("Employee id %d not found",id);
                    return new EmployeeException("Employee id not found"+id);
                });
        logger.info("Fetched employee by ID: {}" ,id);
        return ResponseEntity.ok(employee);
    }
    
    @PutMapping("{id}")
    @CachePut(value = "employees", key = "#id") 
    ResponseEntity<Employee> updateEmployee(@PathVariable int id, @Valid @RequestBody Employee employeeDetails){
        Employee updateEmployee = employeeRepository.findById(id)
                .orElseThrow(() -> new EmployeeException("Employee not found"+id));
        updateEmployee.setName(employeeDetails.getName());
        updateEmployee.setSalary(employeeDetails.getSalary());
        employeeRepository.save(updateEmployee);
        if(employeeDetails.getName()==null || employeeDetails.getName().length()==0) {
            logger.error("Employee name shouldn't be null");
            throw new EmployeeException("Employee name shouldn't be null");
        }
        else {
            logger.info("Updated successfully..");
        }
        return ResponseEntity.ok(updateEmployee);
    }

    @DeleteMapping("{id}")
    @CacheEvict(value = "employees", allEntries = true)
    public ResponseEntity<Employee> deleteEmployee(@PathVariable int id){    
        Employee deleteEmployee = employeeRepository.findById(id)
                .orElseThrow(() -> new EmployeeException(""));
        employeeRepository.delete(deleteEmployee);
        logger.info("Deleted sucessfully...");
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}







Employee.java









package com.example.demo.model;


import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;


@Entity
//smanaging, persisting, and accessing data between Java objects and relational databases.
@Table(name = "employees")
public class Employee implements Serializable{
    
    
//  Serializablde is a process of converting objects into byte stream.
    
//    @NotNull: a constrained CharSequence, Collection, Map, or Array is valid as long as it’s not null, but it can be empty.
//    @NotEmpty: a constrained CharSequence, Collection, Map, or Array is valid as long as it’s not null, and its size/length is greater than zero.
//    @NotBlank: a constrained String is valid as long as it’s not null, and the trimmed length is greater than zero.

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    
    @Column(name = "Name")
    //@NotBlank(message = "Name is mandatory")
    private String name;
    
    //@NotBlank(message = "Salary is mandatory")
    @Column(name = "Salary")
    private float salary;

    public Employee(String name, float salary) {
        super();
        this.name = name;
        this.salary = salary;
    }

    public Employee() {
        super();
    }

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public float getSalary() {
        return salary;
    }
    public void setSalary(float salary) {
        this.salary = salary;
    }
}








EmployeeRepository.java









package com.example.demo.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.model.Employee;

public interface EmployeeRepository extends JpaRepository<Employee , Integer>{

}









EmployeeException.java








package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class EmployeeException extends RuntimeException{

	public EmployeeException(String message) {
		super(message);
	}
}











application.properties







#spring.datasouce.url= jdbc:mysql://localhost:3306/springboot?useSSL=false
#spring.datasource.username=root
#spring.datasource.password=H@rshini1111

spring.jpa.hibernate.ddl-auto=update
#spring.jpa.open-in-view=false

logging.level.com.example.demo=debug

spring.data.redis.host=localhost
spring.data.redis.port=6379


spring.datasource.url=jdbc:mysql://localhost:3306/springboot
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=H@rshini1111








EmployeeTask/pom.xml








<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>EmployeeTask</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>EmployeeTask</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency> 
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
           <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-validation</artifactId>
           </dependency>
        <dependency>
            <groupId>com.example</groupId>
            <artifactId>Autowire-demo-6</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>